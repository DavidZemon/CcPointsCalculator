# This file is used for running end-to-end tests from a JetBrains IDE
# The formal specification for this file can be found at https://github.com/JetBrains/http-request-in-editor-spec
# And general help docs can be found at https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html

POST http://localhost:8080/api/ccpc/calculate
Content-Type: application/json
Accept: application/json

> {%
client.test("No request body", function () {
    client.assert(response.status === 400, "Expected BAD_REQUEST status");
});
%}

###

POST http://localhost:8080/api/ccpc/calculate
Content-Type: application/json
Accept: application/json

{}

> {%
client.test("Empty request body", function () {
    client.assert(response.status === 400, "Expected BAD_REQUEST status");
});
%}

###

POST http://localhost:8080/api/ccpc/calculate
Content-Type: application/json
Accept: application/json

{
    "transactions": null
}

> {%
client.test("Empty transactions list", function () {
    client.assert(response.status === 400, "Expected BAD_REQUEST status");
});
%}

###

POST http://localhost:8080/api/ccpc/calculate
Content-Type: application/json
Accept: application/json

{
    "transactions": [
        {
            "value": 12.34,
            "date": 12345678.9
        }
    ]
}

> {%
client.test("No customer ID", function () {
    client.assert(response.status === 400, "Expected BAD_REQUEST status");
});
%}

###

POST http://localhost:8080/api/ccpc/calculate
Content-Type: application/json
Accept: application/json

{
    "transactions": [
        {
            "id": "someId",
            "date": 12345678.9
        }
    ]
}

> {%
client.test("No transaction value", function () {
    client.assert(response.status === 400, "Expected BAD_REQUEST status");
});
%}

###

POST http://localhost:8080/api/ccpc/calculate
Content-Type: application/json
Accept: application/json

{
    "transactions": [
        {
            "id": "someId",
            "value": 12.34
        }
    ]
}

> {%
client.test("No transaction date", function () {
    client.assert(response.status === 400, "Expected BAD_REQUEST status");
});
%}

###

POST http://localhost:8080/api/ccpc/calculate
Content-Type: application/json
Accept: application/json

{
    "transactions": [
        {
            "id": null,
            "value": 12.34,
            "date": 12345678.9
        }
    ]
}

> {%
client.test("Null customer ID", function () {
    client.assert(response.status === 400, "Expected BAD_REQUEST status");
});
%}

###

POST http://localhost:8080/api/ccpc/calculate
Content-Type: application/json
Accept: application/json

{
    "transactions": [
        {
            "id": "someId",
            "value": null,
            "date": 12345678.9
        }
    ]
}

> {%
client.test("Null transaction value", function () {
    client.assert(response.status === 400, "Expected BAD_REQUEST status");
});
%}

###

POST http://localhost:8080/api/ccpc/calculate
Content-Type: application/json
Accept: application/json

{
    "transactions": [
        {
            "id": "someId",
            "value": 12.34,
            "date": null
        }
    ]
}

> {%
client.test("Null transaction date", function () {
    client.assert(response.status === 400, "Expected BAD_REQUEST status");
});
%}

###

POST http://localhost:8080/api/ccpc/calculate
Content-Type: application/json
Accept: application/json

{
    "transactions": [
        {
            "id": "someId",
            "value": 12.34,
            "date": 12345678.9
        },
        {
            "id": "someId2",
            "value": 56.78,
            "date": 10002345678.912
        }
    ]
}

> {%
client.test("Two small transactions", function () {
    client.assert(response.status === 200, "Expected OK response");

    var expected = {
        customer_count: 2,
        points_total: 6,
        customers: {
            someId: {
                id: "someId",
                transactions: 1,
                points: 0
            },
            someId2: {
                id: "someId2",
                transactions: 1,
                points: 6
            }
        }
    };
    client.assert(JSON.stringify(response.body) === JSON.stringify(expected), 'Expected \n\t' + JSON.stringify(response.body) + '\nto equal\n\t' + JSON.stringify(expected));
});
%}

###

POST http://localhost:8080/api/ccpc/calculate
Content-Type: application/json
Accept: application/json

{
    "transactions": [
        {
            "id": "c1",
            "value": 0.00000,
            "date": 12345678.9
        },
        {
            "id": "c1",
            "value": 0,
            "date": 10002345678.912
        },
        {
            "id": "c1",
            "value": 1,
            "date": 12345678.9
        },
        {
            "id": "c1",
            "value": 50.99499999999999999999999999999999,
            "date": 12345678.9
        },
        {
            "id": "c1",
            "value": 50.995,
            "date": 12345678.9
        },
        {
            "id": "c1",
            "value": 100.9949999999999999999999,
            "date": 12345678.9
        },
        {
            "id": "c1",
            "value": 100.995,
            "date": 12345678.9
        },
        {
            "id": "c1",
            "value": 120.00000000000000000,
            "date": 12345678.9
        },
        {
            "id": "c1",
            "value": -0,
            "date": 10002345678.912
        },
        {
            "id": "c1",
            "value": -1,
            "date": 12345678.9
        },
        {
            "id": "c1",
            "value": -50.99499999999999999999999999999999,
            "date": 12345678.9
        },
        {
            "id": "c1",
            "value": -50.995,
            "date": 12345678.9
        },
        {
            "id": "c1",
            "value": -100.9949999999999999999999,
            "date": 12345678.9
        },
        {
            "id": "c1",
            "value": -100.995,
            "date": 12345678.9
        },
        {
            "id": "c1",
            "value": -120.00000000000000000,
            "date": 12345678.9
        },
        {
            "id": "c2",
            "value": -0,
            "date": 10002345678.912
        },
        {
            "id": "c2",
            "value": -1,
            "date": 12345678.9
        },
        {
            "id": "c2",
            "value": -50.99499999999999999999999999999999,
            "date": 12345678.9
        },
        {
            "id": "c2",
            "value": -50.995,
            "date": 12345678.9
        },
        {
            "id": "c2",
            "value": -100.9949999999999999999999,
            "date": 12345678.9
        },
        {
            "id": "c2",
            "value": -100.995,
            "date": 12345678.9
        },
        {
            "id": "c2",
            "value": -120.00000000000000000,
            "date": 12345678.9
        },
        {
            "id": "c3",
            "value": 0,
            "date": 10002345678.912
        },
        {
            "id": "c3",
            "value": 1,
            "date": 12345678.9
        },
        {
            "id": "c3",
            "value": 50.99499999999999999999999999999999,
            "date": 12345678.9
        },
        {
            "id": "c3",
            "value": 50.995,
            "date": 12345678.9
        },
        {
            "id": "c3",
            "value": 100.9949999999999999999999,
            "date": 12345678.9
        },
        {
            "id": "c3",
            "value": 100.995,
            "date": 12345678.9
        },
        {
            "id": "c3",
            "value": 120.00000000000000000,
            "date": 12345678.9
        }
    ]
}

> {%
client.test("Two small transactions", function () {
    client.assert(response.status === 200, "Expected OK response");

    var expected = {
        "customer_count": 3,
        "points_total": 0,
        "customers": {
            "c3": {
                "id": "c3",
                "transactions": 7,
                "points": 214
            },
            "c1": {
                "id": "c1",
                "transactions": 15,
                "points": 0
            },
            "c2": {
                "id": "c2",
                "transactions": 7,
                "points": -214
            }
        }
    };
    client.assert(JSON.stringify(response.body) === JSON.stringify(expected), 'Expected \n\t' + JSON.stringify(response.body) + '\nto equal\n\t' + JSON.stringify(expected));
});
%}

###
